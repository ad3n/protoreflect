// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: grpc/dummy.proto

package grpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	testprotos "github.com/jhump/protoreflect/v2/internal/testprotos"
	pkg "github.com/jhump/protoreflect/v2/internal/testprotos/pkg"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DummyService_DoSomething_FullMethodName        = "/testprotos.DummyService/DoSomething"
	DummyService_DoSomethingElse_FullMethodName    = "/testprotos.DummyService/DoSomethingElse"
	DummyService_DoSomethingAgain_FullMethodName   = "/testprotos.DummyService/DoSomethingAgain"
	DummyService_DoSomethingForever_FullMethodName = "/testprotos.DummyService/DoSomethingForever"
)

// DummyServiceClient is the client API for DummyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Basically looks just like TestService in "../desc_test_proto3.proto". Except we only
// generate gRPC-related code for this package, not in "..". This copy lets us test reflection
// over said gRPC-related code from grpcreflect.
type DummyServiceClient interface {
	DoSomething(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*pkg.Bar, error)
	DoSomethingElse(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[testprotos.TestMessage, DummyResponse], error)
	DoSomethingAgain(ctx context.Context, in *pkg.Bar, opts ...grpc.CallOption) (grpc.ServerStreamingClient[testprotos.AnotherTestMessage], error)
	DoSomethingForever(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DummyRequest, DummyResponse], error)
}

type dummyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDummyServiceClient(cc grpc.ClientConnInterface) DummyServiceClient {
	return &dummyServiceClient{cc}
}

func (c *dummyServiceClient) DoSomething(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*pkg.Bar, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pkg.Bar)
	err := c.cc.Invoke(ctx, DummyService_DoSomething_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummyServiceClient) DoSomethingElse(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[testprotos.TestMessage, DummyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DummyService_ServiceDesc.Streams[0], DummyService_DoSomethingElse_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[testprotos.TestMessage, DummyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DummyService_DoSomethingElseClient = grpc.ClientStreamingClient[testprotos.TestMessage, DummyResponse]

func (c *dummyServiceClient) DoSomethingAgain(ctx context.Context, in *pkg.Bar, opts ...grpc.CallOption) (grpc.ServerStreamingClient[testprotos.AnotherTestMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DummyService_ServiceDesc.Streams[1], DummyService_DoSomethingAgain_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[pkg.Bar, testprotos.AnotherTestMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DummyService_DoSomethingAgainClient = grpc.ServerStreamingClient[testprotos.AnotherTestMessage]

func (c *dummyServiceClient) DoSomethingForever(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DummyRequest, DummyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DummyService_ServiceDesc.Streams[2], DummyService_DoSomethingForever_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DummyRequest, DummyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DummyService_DoSomethingForeverClient = grpc.BidiStreamingClient[DummyRequest, DummyResponse]

// DummyServiceServer is the server API for DummyService service.
// All implementations must embed UnimplementedDummyServiceServer
// for forward compatibility.
//
// Basically looks just like TestService in "../desc_test_proto3.proto". Except we only
// generate gRPC-related code for this package, not in "..". This copy lets us test reflection
// over said gRPC-related code from grpcreflect.
type DummyServiceServer interface {
	DoSomething(context.Context, *DummyRequest) (*pkg.Bar, error)
	DoSomethingElse(grpc.ClientStreamingServer[testprotos.TestMessage, DummyResponse]) error
	DoSomethingAgain(*pkg.Bar, grpc.ServerStreamingServer[testprotos.AnotherTestMessage]) error
	DoSomethingForever(grpc.BidiStreamingServer[DummyRequest, DummyResponse]) error
	mustEmbedUnimplementedDummyServiceServer()
}

// UnimplementedDummyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDummyServiceServer struct{}

func (UnimplementedDummyServiceServer) DoSomething(context.Context, *DummyRequest) (*pkg.Bar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoSomething not implemented")
}
func (UnimplementedDummyServiceServer) DoSomethingElse(grpc.ClientStreamingServer[testprotos.TestMessage, DummyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DoSomethingElse not implemented")
}
func (UnimplementedDummyServiceServer) DoSomethingAgain(*pkg.Bar, grpc.ServerStreamingServer[testprotos.AnotherTestMessage]) error {
	return status.Errorf(codes.Unimplemented, "method DoSomethingAgain not implemented")
}
func (UnimplementedDummyServiceServer) DoSomethingForever(grpc.BidiStreamingServer[DummyRequest, DummyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DoSomethingForever not implemented")
}
func (UnimplementedDummyServiceServer) mustEmbedUnimplementedDummyServiceServer() {}
func (UnimplementedDummyServiceServer) testEmbeddedByValue()                      {}

// UnsafeDummyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DummyServiceServer will
// result in compilation errors.
type UnsafeDummyServiceServer interface {
	mustEmbedUnimplementedDummyServiceServer()
}

func RegisterDummyServiceServer(s grpc.ServiceRegistrar, srv DummyServiceServer) {
	// If the following call pancis, it indicates UnimplementedDummyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DummyService_ServiceDesc, srv)
}

func _DummyService_DoSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyServiceServer).DoSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DummyService_DoSomething_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyServiceServer).DoSomething(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DummyService_DoSomethingElse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DummyServiceServer).DoSomethingElse(&grpc.GenericServerStream[testprotos.TestMessage, DummyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DummyService_DoSomethingElseServer = grpc.ClientStreamingServer[testprotos.TestMessage, DummyResponse]

func _DummyService_DoSomethingAgain_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(pkg.Bar)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DummyServiceServer).DoSomethingAgain(m, &grpc.GenericServerStream[pkg.Bar, testprotos.AnotherTestMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DummyService_DoSomethingAgainServer = grpc.ServerStreamingServer[testprotos.AnotherTestMessage]

func _DummyService_DoSomethingForever_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DummyServiceServer).DoSomethingForever(&grpc.GenericServerStream[DummyRequest, DummyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DummyService_DoSomethingForeverServer = grpc.BidiStreamingServer[DummyRequest, DummyResponse]

// DummyService_ServiceDesc is the grpc.ServiceDesc for DummyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DummyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testprotos.DummyService",
	HandlerType: (*DummyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoSomething",
			Handler:    _DummyService_DoSomething_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DoSomethingElse",
			Handler:       _DummyService_DoSomethingElse_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DoSomethingAgain",
			Handler:       _DummyService_DoSomethingAgain_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DoSomethingForever",
			Handler:       _DummyService_DoSomethingForever_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/dummy.proto",
}
