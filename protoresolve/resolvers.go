package protoresolve

import (
	"google.golang.org/protobuf/reflect/protodesc"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/reflect/protoregistry"
)

// FileResolver can resolve file descriptors by path.
type FileResolver interface {
	FindFileByPath(string) (protoreflect.FileDescriptor, error)
}

// FilePool is a FileResolver that also allows iteration over the known file descriptors.
type FilePool interface {
	FileResolver
	NumFiles() int
	RangeFiles(f func(protoreflect.FileDescriptor) bool)
	NumFilesByPackage(name protoreflect.FullName) int
	RangeFilesByPackage(name protoreflect.FullName, f func(protoreflect.FileDescriptor) bool)
}

// DescriptorResolver can resolve descriptors by full name.
type DescriptorResolver interface {
	FindDescriptorByName(protoreflect.FullName) (protoreflect.Descriptor, error)
}

// TypedDescriptorResolver can resolve descriptors by full name and provides strongly-typed methods
// for each kind of descriptor. Note that FindFieldByName may return normal fields and may return
// extension fields.
type TypedDescriptorResolver interface {
	FindMessageByName(protoreflect.FullName) (protoreflect.MessageDescriptor, error)
	FindFieldByName(protoreflect.FullName) (protoreflect.FieldDescriptor, error)
	FindExtensionByName(protoreflect.FullName) (protoreflect.ExtensionDescriptor, error)
	FindOneofByName(protoreflect.FullName) (protoreflect.OneofDescriptor, error)
	FindEnumByName(protoreflect.FullName) (protoreflect.EnumDescriptor, error)
	FindEnumValueByName(protoreflect.FullName) (protoreflect.EnumValueDescriptor, error)
	FindServiceByName(protoreflect.FullName) (protoreflect.ServiceDescriptor, error)
	FindMethodByName(protoreflect.FullName) (protoreflect.MethodDescriptor, error)
}

// ExtensionResolver can resolve extensions based on the containing message name and field number.
type ExtensionResolver interface {
	FindExtensionByNumber(message protoreflect.FullName, field protoreflect.FieldNumber) (protoreflect.ExtensionDescriptor, error)
}

// MessageURLResolver can resolve messages based on their type URL. This URL must include the
// fully-qualified type name as the last URI path component.
type MessageURLResolver interface {
	FindMessageByURL(url string) (protoreflect.MessageDescriptor, error)
}

// ExtensionTypeResolver can resolve extension types. An extension type includes more than just
// a descriptor but also refers to runtime types (which could be static types generated by the
// protoc-gen-go plugin).
//
// This interface is the same as protoregistry.ExtensionTypeResolver.
type ExtensionTypeResolver interface {
	FindExtensionByName(field protoreflect.FullName) (protoreflect.ExtensionType, error)
	FindExtensionByNumber(message protoreflect.FullName, field protoreflect.FieldNumber) (protoreflect.ExtensionType, error)
}

var _ protoregistry.ExtensionTypeResolver = ExtensionTypeResolver(nil)
var _ ExtensionTypeResolver = protoregistry.ExtensionTypeResolver(nil)

// MessageTypeResolver can resolve message types. A message type includes more than just a
// descriptor but also refers to runtime types (which could be static types generated by the
// protoc-gen-go plugin).
//
// This interface is the same as protoregistry.MessageTypeResolver.
type MessageTypeResolver interface {
	FindMessageByName(message protoreflect.FullName) (protoreflect.MessageType, error)
	FindMessageByURL(url string) (protoreflect.MessageType, error)
}

var _ protoregistry.MessageTypeResolver = MessageTypeResolver(nil)
var _ MessageTypeResolver = protoregistry.MessageTypeResolver(nil)

// EnumTypeResolver can resolve enum types. An enum type includes more than just a descriptor
// but also refers to runtime types (which could be static types generated by the
// protoc-gen-go plugin).
type EnumTypeResolver interface {
	FindEnumByName(enum protoreflect.FullName) (protoreflect.EnumType, error)
}

// SerializationResolver is a named interface that can be used as a resolver for
// various marshalling and unmarshalling operations. For example it can be used
// to recognize extensions when unmarshalling the binary format. And it can be used
// for recognizing extensions and the contents of Any messages when marshalling and
// unmarshalling the JSON and text formats.
//
// This type can be assigned to the following fields:
//   - proto.UnmarshalOptions.Resolver
//   - protojson.MarshalOptions.Resolver
//   - protojson.UnmarshalOptions.Resolver
//   - prototext.MarshalOptions.Resolver
//   - prototext.UnmarshalOptions.Resolver
type SerializationResolver interface {
	ExtensionTypeResolver
	MessageTypeResolver
}

// TypeResolver can resolve all types: extensions, messages, and enums.
type TypeResolver interface {
	ExtensionTypeResolver
	MessageTypeResolver
	EnumTypeResolver
}

// DependencyResolver can resolve dependencies, which is needed when
// constructing a protoreflect.FileDescriptor from a
// *descriptorpb.FileDescriptorProto.
//
// This interface is the same as protodesc.Resolver.
type DependencyResolver interface {
	FileResolver
	DescriptorResolver
}

var _ protodesc.Resolver = DependencyResolver(nil)
var _ DependencyResolver = protodesc.Resolver(nil)

// Resolver is a comprehensive resolver interface with methods for resolving all kinds
// of descriptors. The AsTypeResolver method returns a view of the resolver as a
// TypeResolver. In most cases, the returned types are dynamic types constructed using
// the resolver's descriptors and the "google.golang.org/protobuf/types/dynamicpb"
// package.
type Resolver interface {
	FileResolver
	FilePool
	DescriptorResolver
	TypedDescriptorResolver
	ExtensionResolver
	MessageURLResolver
	AsTypeResolver() TypeResolver
}
